# -*- coding: utf-8 -*-
"""CursoDePython.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11UldTbyEryZQUS5Jrl_ahEQqilSk_bJR

# Comentários
"""

# Este é um comentário de uma linha

'''
Este é um comentário
de várias 
linhas
'''

# print ('Curso de Python')

print ('Curso de Python') # Comentário no final

"""print ('Curso de Python')

# Print (  )  -> Saída de Dados
"""

print ('Curso de Python')

print ('Curso de \n Python')# \n  Quebra de linha

print ('Curso de \t Python')# Tabulação

print ('Curso ')
print ('Python')

print ('Curso ',end='\n')
print ('Python')

print ('Curso ',end='')
print ('Python')

print ('008.334.786',end='-')
print ('98')

"""# Variáveis"""

print ('Nome: Cosmo - Idade:35')
print ('Nome: Cosmo - Idade:35')
print ('Nome: Cosmo - Idade:35')

nome = 'Cosmo'
idade = 35

print (f'Nome: {nome} - Idade:{idade}')

# Não podemos usar 
1nome = 'Cosmo'
Meu nome = 'Cosmo'

 
# Podemos usar 
nome1 = 'Cosmo'
meu_nome = 'Lucas'
meuNome = 'Felipe'

"""# Tipos de dados
- str -> strings - textos
- int -> Números inteiros
- float -> Números decimais
- bool -> Expressão booleana - True ou False
-  type() -> Retorna o tipo de dado
"""

texto = 'Python'
inteiro = 10 # 5 , 8, -5
decimal = 10.5 # 5.5 , -8.5
booleano = True # ou False

print (texto ,end=' ')
print (type(texto))

print (inteiro,end=' ')
print (type(inteiro))

print (decimal,end=' ')
print (type(decimal))

print (booleano,end=' ')
print (type(booleano))

"""# Operadores Aritiméticos

- Adição -> +
- Subtração -> -
- Divisão -> /
- Multiplicação -> *
- Módulo -> % - ou resto da divisão
- Divisão inteira -> //
- Potenciação -> **
"""

num1 = 10
num2 = 3

print (num1 + num2)

print (num1 - num2)

print (num1 * num2)

print (num1 / num2)

print (num1 % num2)

print (num1 // num2)

print (num1 ** num2)

"""# Manipulação de strings

- len - Retorna o tamanho da string
- capitalize - Retorna a string com a primeira letra maiúsculas
- upper - Retorna uma cópia da string com as letras maiúsculas
- lower - Retorna uma cópia da string com a letras minúsculas
- title - Retorna uma cópia da string com as primeiras letras de cada pal
- strip - Remove os espaços em branco da strings
- cout - Retorna quantas vezes um caractere aparece na string
"""

# 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
# c u r s o   d e   p  y  t  h  o  n

curso = 'curso de python'
print (curso)

print (len(curso))

print ("Curso de 'Python'")

# Fatiamento
print (curso[0:5])
print (curso [9:15])
print (curso [-1])

print(curso.capitalize())

print (curso.upper())

print (curso.lower())

print (curso.title())

col = ' Colab '
print (col)
print (col.strip())

fruta = 'Bananada de banana'
print (fruta.count('a'))

"""# Formatação de string"""

nome = 'Cosmo'
idade = 35

print ('Nome:',nome,'idade:',idade)

print ('Nome:{} Idade:{}'.format(nome,idade))

print (f'Nome:{nome} Idade:{idade}')

"""# input () -> Entrada de dados
- a função input - Retorna o tipo str
"""

nome = input('Digite o seu nome: ')
print (type(nome))
print (nome)

idade = int (input ('Digite sua idade: '))
print (idade)

"""# Operadores de comparação

- Maior - >
- Menor - <
- Maior ou igual - >=
- Menor ou igual - <=
- igual - ==
- Diferente - !=
"""

num1 = 5
num2 = 4

print (num1 > num2)

print (num1 < num2)

print (num1 >= num2)

print (num1 <= num2)

print (num1 == num2)

print (num1 != num2)

"""# Operadore Lógicos

- not - não é - Inverte o resultado
- and - e - Retorna True se as duas condições for verdadeiras
- or - ou - Retorna True se as uma das duas condições for verdadeira
"""

a = 10
b = 8
c = 7

print (a > b and b > c)

print (a > b or b < c)

print (not a > b)

"""# Estruturas condicionais
# if , elif , else

- if -> se
- else -> senão
- elif -> senão se
"""

idade = int (input ('Digite sua idade: '))

if idade >= 18 and idade < 60:
 print ('Maior de idade!')
elif idade < 18:
 print ('Menor idade!')
else:
 print ('Melhor idade!')

"""# list () -> Listas

- len() -> Retorna o tamanho da lista
- min() -> Retorna o menor valor
- max() -> Retorna o maior valor
- append() -> Adiciona item no final da lista
- insert() -> Adiciona em um índice específico
- pop() Remove o último item da lista ou um índice específico
- del -> Remove o item pelo índice
- sort() -> Ordena a lista
- reverse() -> Inverte a lista
"""

#           0      1  2   3
lista = ['Python',10,5.5,True]

lista

len(lista)

lista

lista [0]

lista [-1]

lista = [2,4,3,5,7,6,9,8,1,10]

lista

min(lista)

max(lista)

lista.sort()
lista

lista.reverse()
lista

lista [0] = 'Python'
lista

lista.append('Java')
lista

lista.insert(1,'HTML')
lista

lista.pop()
lista

lista.pop(1)
lista

del lista [0]
lista

lista = list(range(0,11))
lista

"""# tuple ( ) -> Tuplas

-**negrito** As tuplas são imutáveis , não pode ser alteradas
"""

tupla = (8,7,3,4,4,5)
tupla

tupla [0]

tupla [0:3]

tupla.index(8)

tupla.count(4)

"""# dict -> Dicionários
- keys( ) # Retorna a chave
- values( ) # Retorna os valores
- items( ) # Retorna os itens
"""

cores = {
 'A': 'Verde',
 'B': 'Vermelho',
 'C': 'Amarelo'
 }

cores

cores ['D'] = 'Azul'

cores

cores ['A']

cores.keys()

cores.values()

cores.items()

del cores['A']

cores

"""# while -> Enquanto"""

x = 0
while x < 10:
 print (x)
 x = x + 1

senha = 123
entrada = 0

while senha != entrada:
  entrada = int (input ('Digite sua senha: '))
  if senha == entrada:
    print ('Acesso liberado!')
  else:
    print ('Senha inválida!, Tente novamente')

import random

senha = random.randint(0,10)
leitura = 0

print (senha)

while senha != entrada:
  entrada = int (input ('Digite sua senha: '))
  if senha == entrada:
    print ('Acesso liberado!')
  else:
    print ('Senha inválida!, Tente novamente')

"""# for -> para"""

for x in range(11):
  print (x)

lista = [1,2,3,4,5,6,7,8,9]
lista

for item in lista:
  print (item)

curso = 'Curso de Python'
curso

for letra in curso:
  print (letra)

senha = 123

for leitura in range( senha):
    leitura = int (input ('Digite a senha!'))
    if senha == leitura:
        print ('Acesso liberado!')
        break
    else:
        print ('Senha incorreta , tente novamente')

"""# def ( ) -> Funções"""

def mensagem():
    print ('Bom dia!')

mensagem()

def mensagem(msg):
 return msg

mensagem('Bom dia!')

def soma(x,y):
    return x + y

soma(4,5)

def login():
    senha = 123

    for leitura in range( senha):

        leitura = int (input ('Digite a senha!'))
        if senha == leitura:
            print ('Acesso liberado!')
            break
        else:
            print ('Senha incorreta , tente novamente')

login()

"""# class -> Classes

- Atributos e Métodos
"""

class Pessoa:
     # Atributos
    nome = ''
    idade = 0

p1 = Pessoa()
p2 = Pessoa()

p1.nome = 'Cosmo'
p1.idade = 35
p2.nome = 'Lucas'
p2.idade = 14

print (p1.nome)
print (p1.idade)

print (p2.nome)
print (p2.idade)

class Pessoa:
    # Atributos
    nome = ''
    idade = 0

    # Métodos
    def dados(self):
        print(f'Nome:{self.nome} , Idade:{self.idade}')

p3 = Pessoa()
p3.idade = 'Felipe'
p3.idade = 16

p3.dados()

class Pessoa:
 # Método construtor ou inicial
    def __init__(self,valor_nome,valor_idade):
        self.nome = valor_nome
        self.idade = valor_idade

p4 = Pessoa('Cosmo',35)

print (p4.nome,p4.idade)

class Pessoa:
 # Método construtor ou inicial
    def __init__(self,valor_nome,valor_idade):
        self.nome = valor_nome
        self.idade = valor_idade

    def dados (self):
        return (f'Nome:{self.nome} Idade:{self.idade}')   
        
    # get
    def get_nome(self):
        return self.nome

    def get_idade(self):
        return self.idade

    # set
    def set_nome (self,novo_nome):
        self.nome = novo_nome

    def set_idade(self,nova_idade):
        self.idade = nova_idade

p5 = Pessoa('Cosmo' , 35)

print (p5.dados())

print(p5.get_nome())
print(p5.get_idade())

p5.set_nome('Lucas')
p5.set_idade(16)

print (p5.nome)
print (p5.idade)

# Herança
class Animal():
    def __init__(self, nome, cor):
        self.nome = nome
        self.cor = cor
        
    def comer(self):
        print(f"O {self.nome} está comendo")

class Gato(Animal):
    def __init__(self, nome, cor):
        super().__init__(nome, cor)

class Cachorro(Animal):
    def __init__(self, nome, cor):
        super().__init__(nome, cor)

gato = Gato("Bichano", "Branco")
cachorro = Cachorro("Totó", "Preto")

gato.comer()
cachorro.comer()